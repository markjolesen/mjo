.\"  Copyright (c) 2020 Mark J. Olesen
.\"
.\"  CC BY 4.0
.\"
.\"  This file is licensed under the Creative Commons Attribution 4.0 
.\"  International license.
.\"
.\"  You are free to:
.\"
.\"    Share --- copy and redistribute the material in any medium or format
.\" 
.\"    Adapt --- remix, transform, and build upon the material for any purpose,
.\"              even commercially
.\"
.\"  Under the following terms:
.\"
.\"    Attribution --- You must give appropriate credit, provide a link
.\"                    to the license, and indicate if changes were made. You
.\"                    may do so in any reasonable manner, but not in any way
.\"                    that suggests the licensor endorses you or your use.
.\"
.\"   Full text of this license can be found in 
.\"   '${MJO_HOME}/licenses/CC-BY-SA-4.0'or visit 
.\"   'http://creativecommons.org/licenses/by/4.0/' or send a letter 
.\"   to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
.\"
.\"  This file is part of mjo library
.\"
.Dd July 22, 2020
.Os
.Dt mjo_stdlib
.Sh NAME
.Nm mjo_abort
.Nd abnormally terminate the current process
.Sh SYNOPSIS
.In mstdlib.h
.Ft void
.Fo mjo_abort
.Fa "int const i_ecode"
.Fc
.Sh DESCRIPTION
.Fn mjo_abort
is a macro, which calls
.Fn mjo_mem_abort 
to print a small amount of diagnostic information and then terminate
the current process via a call to
.Xr abort 3 .
.Pp
Following is a description of the arguments.
.Bl -tag -width 5
.It Fa i_ecode
errno or an application code
.El
.Pp
If
.Fa i_ecode
is zero, it will not be evaluated.
.Pp
If
.Fa i_ecode
is not zero and is not a valid system code, the error code shall
be printed.
.Pp
If 
.Fa i_ecode
is a valid system error code the error code and message string 
shall be printed.
.Sh NOTES
.Pp
The function and line number of the calling routine shall be printed.
The diagnostic information is followed by an error code and possibly 
the message string.
.Pp
A call to 
.Xr streror 2
is analyzed to determine if the error code is a system or application
code.
.Pp
System error codes are defined in
.In errno.h .
.Sh 
.Sh SEE ALSO
.Xr abort 3
.Xr strerror 2
.Sh EXAMPLES
.Bd -literal -offset indent
#include <errno.h>
#include <stdint.h>
/**/
#include <mstdlib.h>

int
  main()
{
  int rc;
  size_t result;

  rc = mjo_add_size_t(&result, SIZE_MAX, 1);

  if (rc)
    {
      mjo_abort(errno);
    }

  return rc;
}
.Ed
.Pp
OUTPUT
.Bd -literal -offset indent
ABORT:          Function: /home/devel/kv3/lib/mjo/examples/abort.c (26)
                errno: Result too large (34)
Abort trap (core dumped)
.Ed
.Pp
SOURCE
.Pp
.D1 Pa ${MJO_HOME}/examples/abort.c
