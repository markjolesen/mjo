.\"  Copyright (c) 2020 Mark J. Olesen
.\"
.\"  CC BY 4.0
.\"
.\"  This file is licensed under the Creative Commons Attribution 4.0 
.\"  International license.
.\"
.\"  You are free to:
.\"
.\"    Share --- copy and redistribute the material in any medium or format
.\" 
.\"    Adapt --- remix, transform, and build upon the material for any purpose,
.\"              even commercially
.\"
.\"  Under the following terms:
.\"
.\"    Attribution --- You must give appropriate credit, provide a link
.\"                    to the license, and indicate if changes were made. You
.\"                    may do so in any reasonable manner, but not in any way
.\"                    that suggests the licensor endorses you or your use.
.\"
.\"   Full text of this license can be found in 
.\"   '${MJO_HOME}/licenses/CC-BY-SA-4.0'or visit 
.\"   'http://creativecommons.org/licenses/by/4.0/' or send a letter 
.\"   to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
.\"
.\"  This file is part of mjo library
.\"
.Dd July 22, 2020
.Os
.Dt mstdlib
.Sh NAME
.Nm mjo_mulsize_t
.Nd compute the product of two size_t values
.Sh SYNOPSIS
.In mstdlib.h
.Ft int
.Fo mjo_mul_size_t
.Fa "size_t * const o_product"
.Fa "size_t const i_a"
.Fa "size_t const i_b"
.Fc
.Sh DESCRIPTION
.Fn mjo_mul_size_t
shall multiply the multiplicand
.Fa i_a
by the multiplier
.Fa i_b
and store the product 
.Po result Pc in
.Fa *o_product .
.Pp
Following is a description of the arguments.
.Bl -tag -width 5
.It Fa o_product 
pointer to a 
.So size_t Sc 
that shall be set to the product of the multiplication operation
.It Fa i_a 
multiplier
.It Fa i_b
multiplicand
.El
.Pp
If an overflow does not occur, the product of the multiplication operation
.Po Fa i_a No * Fa i_b Pc 
shall be stored in 
.Fa *o_product .
.Pp
If an overflow occurs,
.Fa *o_product
shall be set to 
.Dv SIZE_MAX .
.Sh RETURN VALUES
If an overflow does not occur, the return code shall be 
.Er MJO_OK .
Otherwise, the return code shall be 
.Er MJO_FAIL 
and errno shall be set to
.Er ERANGE .
.Sh NOTES
The product of the multiplication operation may equal 
.Dv SIZE_MAX .
Thus, the caller shall always check the return value to confirm if
the operation was the result of an overflow condition.
.Sh EXAMPLES
.Bd -literal -offset indent
#include <errno.h>
#include <stdint.h>
/**/
#include <mstdio.h>
#include <mstdlib.h>

int
  main()
{
  int rc;
  size_t product;

  errno = 0;
  rc = mjo_mul_size_t(&product, SIZE_MAX, SIZE_MAX);

  printf("%zu * %zu = %zu\n", SIZE_MAX, SIZE_MAX, product);

  if (SIZE_MAX == product)
    {
      printf("success (SIZE_MAX = product)\n");
    }
  else
    {
      printf("fail (SIZE_MAX != product)\n");
    }

  if (MJO_OK == rc)
    {
      printf("failed (no overflow)\n");
      rc = -1;
    }
  else
    {
      printf("success (overflow)\n");
      rc = 0;
    }

  if (ERANGE == errno)
    {
      printf("success (errno = ERANGE)\n");
    }
  else
    {
      printf("fail (errno != ERANGE)\n");
      rc = -1;
    }

  return rc;
}
.Ed
.Pp
OUTPUT
.Bd -literal -offset indent
18446744073709551615 * 18446744073709551615 = 18446744073709551615
success (SIZE_MAX = product)
success (overflow)
success (errno = ERANGE)
.Ed
.Pp
SOURCE
.Pp
.D1 Pa ${MJO_HOME}/examples/mul.c
